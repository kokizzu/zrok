// Code generated by go-swagger; DO NOT EDIT.

package agent

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RemoteAccessReader is a Reader for the RemoteAccess structure.
type RemoteAccessReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RemoteAccessReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRemoteAccessOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewRemoteAccessUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewRemoteAccessInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 502:
		result := NewRemoteAccessBadGateway()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /agent/access] remoteAccess", response, response.Code())
	}
}

// NewRemoteAccessOK creates a RemoteAccessOK with default headers values
func NewRemoteAccessOK() *RemoteAccessOK {
	return &RemoteAccessOK{}
}

/*
RemoteAccessOK describes a response with status code 200, with default header values.

ok
*/
type RemoteAccessOK struct {
	Payload *RemoteAccessOKBody
}

// IsSuccess returns true when this remote access o k response has a 2xx status code
func (o *RemoteAccessOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this remote access o k response has a 3xx status code
func (o *RemoteAccessOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this remote access o k response has a 4xx status code
func (o *RemoteAccessOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this remote access o k response has a 5xx status code
func (o *RemoteAccessOK) IsServerError() bool {
	return false
}

// IsCode returns true when this remote access o k response a status code equal to that given
func (o *RemoteAccessOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the remote access o k response
func (o *RemoteAccessOK) Code() int {
	return 200
}

func (o *RemoteAccessOK) Error() string {
	return fmt.Sprintf("[POST /agent/access][%d] remoteAccessOK  %+v", 200, o.Payload)
}

func (o *RemoteAccessOK) String() string {
	return fmt.Sprintf("[POST /agent/access][%d] remoteAccessOK  %+v", 200, o.Payload)
}

func (o *RemoteAccessOK) GetPayload() *RemoteAccessOKBody {
	return o.Payload
}

func (o *RemoteAccessOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(RemoteAccessOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRemoteAccessUnauthorized creates a RemoteAccessUnauthorized with default headers values
func NewRemoteAccessUnauthorized() *RemoteAccessUnauthorized {
	return &RemoteAccessUnauthorized{}
}

/*
RemoteAccessUnauthorized describes a response with status code 401, with default header values.

unauthorized
*/
type RemoteAccessUnauthorized struct {
}

// IsSuccess returns true when this remote access unauthorized response has a 2xx status code
func (o *RemoteAccessUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this remote access unauthorized response has a 3xx status code
func (o *RemoteAccessUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this remote access unauthorized response has a 4xx status code
func (o *RemoteAccessUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this remote access unauthorized response has a 5xx status code
func (o *RemoteAccessUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this remote access unauthorized response a status code equal to that given
func (o *RemoteAccessUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the remote access unauthorized response
func (o *RemoteAccessUnauthorized) Code() int {
	return 401
}

func (o *RemoteAccessUnauthorized) Error() string {
	return fmt.Sprintf("[POST /agent/access][%d] remoteAccessUnauthorized ", 401)
}

func (o *RemoteAccessUnauthorized) String() string {
	return fmt.Sprintf("[POST /agent/access][%d] remoteAccessUnauthorized ", 401)
}

func (o *RemoteAccessUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRemoteAccessInternalServerError creates a RemoteAccessInternalServerError with default headers values
func NewRemoteAccessInternalServerError() *RemoteAccessInternalServerError {
	return &RemoteAccessInternalServerError{}
}

/*
RemoteAccessInternalServerError describes a response with status code 500, with default header values.

internal server error
*/
type RemoteAccessInternalServerError struct {
}

// IsSuccess returns true when this remote access internal server error response has a 2xx status code
func (o *RemoteAccessInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this remote access internal server error response has a 3xx status code
func (o *RemoteAccessInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this remote access internal server error response has a 4xx status code
func (o *RemoteAccessInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this remote access internal server error response has a 5xx status code
func (o *RemoteAccessInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this remote access internal server error response a status code equal to that given
func (o *RemoteAccessInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the remote access internal server error response
func (o *RemoteAccessInternalServerError) Code() int {
	return 500
}

func (o *RemoteAccessInternalServerError) Error() string {
	return fmt.Sprintf("[POST /agent/access][%d] remoteAccessInternalServerError ", 500)
}

func (o *RemoteAccessInternalServerError) String() string {
	return fmt.Sprintf("[POST /agent/access][%d] remoteAccessInternalServerError ", 500)
}

func (o *RemoteAccessInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRemoteAccessBadGateway creates a RemoteAccessBadGateway with default headers values
func NewRemoteAccessBadGateway() *RemoteAccessBadGateway {
	return &RemoteAccessBadGateway{}
}

/*
RemoteAccessBadGateway describes a response with status code 502, with default header values.

bad gateway; agent not reachable
*/
type RemoteAccessBadGateway struct {
}

// IsSuccess returns true when this remote access bad gateway response has a 2xx status code
func (o *RemoteAccessBadGateway) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this remote access bad gateway response has a 3xx status code
func (o *RemoteAccessBadGateway) IsRedirect() bool {
	return false
}

// IsClientError returns true when this remote access bad gateway response has a 4xx status code
func (o *RemoteAccessBadGateway) IsClientError() bool {
	return false
}

// IsServerError returns true when this remote access bad gateway response has a 5xx status code
func (o *RemoteAccessBadGateway) IsServerError() bool {
	return true
}

// IsCode returns true when this remote access bad gateway response a status code equal to that given
func (o *RemoteAccessBadGateway) IsCode(code int) bool {
	return code == 502
}

// Code gets the status code for the remote access bad gateway response
func (o *RemoteAccessBadGateway) Code() int {
	return 502
}

func (o *RemoteAccessBadGateway) Error() string {
	return fmt.Sprintf("[POST /agent/access][%d] remoteAccessBadGateway ", 502)
}

func (o *RemoteAccessBadGateway) String() string {
	return fmt.Sprintf("[POST /agent/access][%d] remoteAccessBadGateway ", 502)
}

func (o *RemoteAccessBadGateway) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
RemoteAccessBody remote access body
swagger:model RemoteAccessBody
*/
type RemoteAccessBody struct {

	// auto address
	AutoAddress string `json:"autoAddress,omitempty"`

	// auto end port
	// Maximum: 65535
	// Minimum: 1
	AutoEndPort int64 `json:"autoEndPort,omitempty"`

	// auto mode
	AutoMode bool `json:"autoMode,omitempty"`

	// auto start port
	// Maximum: 65535
	// Minimum: 1
	AutoStartPort int64 `json:"autoStartPort,omitempty"`

	// bind address
	BindAddress string `json:"bindAddress,omitempty"`

	// env z Id
	EnvZID string `json:"envZId,omitempty"`

	// response headers
	ResponseHeaders []string `json:"responseHeaders"`

	// token
	Token string `json:"token,omitempty"`
}

// Validate validates this remote access body
func (o *RemoteAccessBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAutoEndPort(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAutoStartPort(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RemoteAccessBody) validateAutoEndPort(formats strfmt.Registry) error {
	if swag.IsZero(o.AutoEndPort) { // not required
		return nil
	}

	if err := validate.MinimumInt("body"+"."+"autoEndPort", "body", o.AutoEndPort, 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("body"+"."+"autoEndPort", "body", o.AutoEndPort, 65535, false); err != nil {
		return err
	}

	return nil
}

func (o *RemoteAccessBody) validateAutoStartPort(formats strfmt.Registry) error {
	if swag.IsZero(o.AutoStartPort) { // not required
		return nil
	}

	if err := validate.MinimumInt("body"+"."+"autoStartPort", "body", o.AutoStartPort, 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("body"+"."+"autoStartPort", "body", o.AutoStartPort, 65535, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this remote access body based on context it is used
func (o *RemoteAccessBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *RemoteAccessBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RemoteAccessBody) UnmarshalBinary(b []byte) error {
	var res RemoteAccessBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
RemoteAccessOKBody remote access o k body
swagger:model RemoteAccessOKBody
*/
type RemoteAccessOKBody struct {

	// frontend token
	FrontendToken string `json:"frontendToken,omitempty"`
}

// Validate validates this remote access o k body
func (o *RemoteAccessOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this remote access o k body based on context it is used
func (o *RemoteAccessOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *RemoteAccessOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RemoteAccessOKBody) UnmarshalBinary(b []byte) error {
	var res RemoteAccessOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
