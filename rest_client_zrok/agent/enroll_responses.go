// Code generated by go-swagger; DO NOT EDIT.

package agent

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// EnrollReader is a Reader for the Enroll structure.
type EnrollReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *EnrollReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewEnrollOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewEnrollBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewEnrollUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewEnrollInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /agent/enroll] enroll", response, response.Code())
	}
}

// NewEnrollOK creates a EnrollOK with default headers values
func NewEnrollOK() *EnrollOK {
	return &EnrollOK{}
}

/*
EnrollOK describes a response with status code 200, with default header values.

ok
*/
type EnrollOK struct {
	Payload *EnrollOKBody
}

// IsSuccess returns true when this enroll o k response has a 2xx status code
func (o *EnrollOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this enroll o k response has a 3xx status code
func (o *EnrollOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this enroll o k response has a 4xx status code
func (o *EnrollOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this enroll o k response has a 5xx status code
func (o *EnrollOK) IsServerError() bool {
	return false
}

// IsCode returns true when this enroll o k response a status code equal to that given
func (o *EnrollOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the enroll o k response
func (o *EnrollOK) Code() int {
	return 200
}

func (o *EnrollOK) Error() string {
	return fmt.Sprintf("[POST /agent/enroll][%d] enrollOK  %+v", 200, o.Payload)
}

func (o *EnrollOK) String() string {
	return fmt.Sprintf("[POST /agent/enroll][%d] enrollOK  %+v", 200, o.Payload)
}

func (o *EnrollOK) GetPayload() *EnrollOKBody {
	return o.Payload
}

func (o *EnrollOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(EnrollOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEnrollBadRequest creates a EnrollBadRequest with default headers values
func NewEnrollBadRequest() *EnrollBadRequest {
	return &EnrollBadRequest{}
}

/*
EnrollBadRequest describes a response with status code 400, with default header values.

bad request; already enrolled
*/
type EnrollBadRequest struct {
}

// IsSuccess returns true when this enroll bad request response has a 2xx status code
func (o *EnrollBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this enroll bad request response has a 3xx status code
func (o *EnrollBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this enroll bad request response has a 4xx status code
func (o *EnrollBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this enroll bad request response has a 5xx status code
func (o *EnrollBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this enroll bad request response a status code equal to that given
func (o *EnrollBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the enroll bad request response
func (o *EnrollBadRequest) Code() int {
	return 400
}

func (o *EnrollBadRequest) Error() string {
	return fmt.Sprintf("[POST /agent/enroll][%d] enrollBadRequest ", 400)
}

func (o *EnrollBadRequest) String() string {
	return fmt.Sprintf("[POST /agent/enroll][%d] enrollBadRequest ", 400)
}

func (o *EnrollBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewEnrollUnauthorized creates a EnrollUnauthorized with default headers values
func NewEnrollUnauthorized() *EnrollUnauthorized {
	return &EnrollUnauthorized{}
}

/*
EnrollUnauthorized describes a response with status code 401, with default header values.

unauthorized
*/
type EnrollUnauthorized struct {
}

// IsSuccess returns true when this enroll unauthorized response has a 2xx status code
func (o *EnrollUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this enroll unauthorized response has a 3xx status code
func (o *EnrollUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this enroll unauthorized response has a 4xx status code
func (o *EnrollUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this enroll unauthorized response has a 5xx status code
func (o *EnrollUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this enroll unauthorized response a status code equal to that given
func (o *EnrollUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the enroll unauthorized response
func (o *EnrollUnauthorized) Code() int {
	return 401
}

func (o *EnrollUnauthorized) Error() string {
	return fmt.Sprintf("[POST /agent/enroll][%d] enrollUnauthorized ", 401)
}

func (o *EnrollUnauthorized) String() string {
	return fmt.Sprintf("[POST /agent/enroll][%d] enrollUnauthorized ", 401)
}

func (o *EnrollUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewEnrollInternalServerError creates a EnrollInternalServerError with default headers values
func NewEnrollInternalServerError() *EnrollInternalServerError {
	return &EnrollInternalServerError{}
}

/*
EnrollInternalServerError describes a response with status code 500, with default header values.

internal server error
*/
type EnrollInternalServerError struct {
}

// IsSuccess returns true when this enroll internal server error response has a 2xx status code
func (o *EnrollInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this enroll internal server error response has a 3xx status code
func (o *EnrollInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this enroll internal server error response has a 4xx status code
func (o *EnrollInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this enroll internal server error response has a 5xx status code
func (o *EnrollInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this enroll internal server error response a status code equal to that given
func (o *EnrollInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the enroll internal server error response
func (o *EnrollInternalServerError) Code() int {
	return 500
}

func (o *EnrollInternalServerError) Error() string {
	return fmt.Sprintf("[POST /agent/enroll][%d] enrollInternalServerError ", 500)
}

func (o *EnrollInternalServerError) String() string {
	return fmt.Sprintf("[POST /agent/enroll][%d] enrollInternalServerError ", 500)
}

func (o *EnrollInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
EnrollBody enroll body
swagger:model EnrollBody
*/
type EnrollBody struct {

	// env z Id
	EnvZID string `json:"envZId,omitempty"`
}

// Validate validates this enroll body
func (o *EnrollBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this enroll body based on context it is used
func (o *EnrollBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *EnrollBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *EnrollBody) UnmarshalBinary(b []byte) error {
	var res EnrollBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
EnrollOKBody enroll o k body
swagger:model EnrollOKBody
*/
type EnrollOKBody struct {

	// token
	Token string `json:"token,omitempty"`
}

// Validate validates this enroll o k body
func (o *EnrollOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this enroll o k body based on context it is used
func (o *EnrollOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *EnrollOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *EnrollOKBody) UnmarshalBinary(b []byte) error {
	var res EnrollOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
